\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename stumpwm.info
@settitle StumpWM manual
@setchapternewpage odd
@c %**end of header

@dircategory X11
@direntry
* StumpWM: (StumpWM).       A Common Lisp window manager
@end direntry

@ifinfo
This is the Stump Window Manager user manual.

Copyright @copyright{} 2000, 2001 Shawn Betts

Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and
this permission notice are preserved on all copies.

@ignore
Permission is granted to process this file through TeX
and print the results, provided the printed document
carries a copying permission notice identical to this
one except for the removal of this paragraph (this
paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified
versions of this manual under the conditions for
verbatim copying, provided also that the sections
entitled ``Copying'' and ``GNU General Public License''
are included exactly as in the original, and provided
that the entire resulting derived work is distributed
under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute
translations of this manual into another language,
under the above conditions for modified versions,
except that this permission notice may be stated in a
translation approved by the Free Software Foundation.
@end ifinfo

@titlepage
@sp 10
@titlefont{The Stump Window Manager}
@author Shawn Betts

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2000, 2001 Shawn Betts

Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and
this permission notice are preserved on all copies.

Permission is granted to copy and distribute modified
versions of this manual under the conditions for
verbatim copying, provided also that the sections
entitled ``Copying'' and ``GNU General Public License''
are included exactly as in the original, and provided
that the entire resulting derived work is distributed
under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute
translations of this manual into another language,
under the above conditions for modified versions,
except that this permission notice may be stated in a
translation approved by the Free Software Foundation.
@end titlepage

@node Top, Introduction, (dir), (dir)

@ifinfo
This document explains how to use The Stump Window Manager.
@end ifinfo

@menu
* Introduction::                
* Key Bindings::                
* Message and Input Bar::       
* Windows::                     
* Frames::                      
* Mode-line::                   
* Groups::                      
* Screens::                     
* Interacting With Unix::       
* Interacting With X11::        
* Miscellaneous Commands::      
* Hooks::                       
* Command and Function Index::  
* Variable Index::              

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Starting StumpWM::            
* Basic Usage::                 
* Contact the StumpWM developers::  

Key Bindings

* List of Default Keybindings::  
* Binding Keys::                

Message and Input Bar

* Customizing The Bar::         
* Using The Input Bar::         
* Programming The Message Bar::  
* Programming the Input Bar::   

Windows

* Window Marks::                
* Customizing Window Appearance::  
* Controlling Raise And Map Requests::  
* Programming With Windows::    

Groups

* Customizing Groups::          

Screens

* Xinerama::                    
* Programming With Screens::    

Miscellaneous Commands

* Menus::                       
* Debugging StumpWM::           
* Timers::                      
* Getting Help::                

@end detailmenu
@end menu

@node Introduction, Key Bindings, Top, Top
@chapter Introduction
StumpWM is an X11 window manager written entirely in Common Lisp. Its
user interface goals are similar to ratpoison's but with an emphasis on
customizability, completeness, and cushiness.

@menu
* Starting StumpWM::            
* Basic Usage::                 
* Contact the StumpWM developers::  
@end menu

@node Starting StumpWM, Basic Usage, Introduction, Introduction
@section Starting StumpWM
There are a number of ways to start StumpWM but the most straight
forward method is as follows. This assumes you have a copy of the
StumpWM source code and are using the @samp{SBCL} Common Lisp
environment.

@enumerate
@item
Install @samp{SBCL}, the @samp{portable-clx} package, and
@samp{cl-ppcre}. In Debian, @samp{portable-clx} is the
@samp{cl-clx-sbcl} package. You can also use @samp{asdf-install} to
download and install clx:

@example
$ sbcl
* (require :asdf)
* (require :asdf-install)
* (asdf-install:install :clx)
* (asdf-install:install :cl-ppcre)
@end example

Note that asdf-install requires @samp{gnupg}.

@item
In the @file{stumpwm} directory, run @samp{./configure}.

@item
run @samp{make}. If all goes well,
this should create a @file{stumpwm} executable.

@item
In your @file{~/.xinitrc} file include the line
@command{/path/to/stumpwm}. Remember to replace @samp{/path/to/}
with the actual path.

@item
Finally, start X windows with @command{startx}. Cross your
fingers. You should see a @samp{Welcome To the Stump Window Manager}
message pop up in the upper, right corner. At this point, you have
successfully started StumpWM.
@end enumerate

@node Basic Usage, Contact the StumpWM developers, Starting StumpWM, Introduction
@section Basic Usage
Once you have StumpWM up and running, the first thing you might want
to do is start @samp{Emacs}. Type @kbd{C-t e}, or in other words
@kbd{Control + t} followed by @kbd{e}. Now perhaps you want an
@samp{xterm}. Type @kbd{C-t c}. Now you have some programs running.

To see a list of windows StumpWM is managing, type @kbd{C-t w}. The
highlighted window is the one you're looking at right now. It's the
focused window.

All of StumpWM's keys are bound to named commands, which can be
executed not only by keys but also from the input bar. Type @kbd{C-t
;} to open a command prompt. Now type @samp{time} and press
return. Note, @samp{time} can also be called by typing @kbd{C-t a}.
Throughout this manual you'll find definitions for commands,
functions, and variables. Any command you see in this manual can be
executed from the input bar or bound to a key.

At this point you probably want to switch back from your new
@samp{xterm} to @samp{Emacs}. Type @kbd{C-t C-t}. This runs the
@command{other} command. Type it again and you're back to xterm.

Perhaps you'd like to see @samp{emacs} and @samp{xterm}
side-by-side. Type @kbd{C-t s}. You have now split the screen into 2
@samp{frames}. For more information @xref{Frames}. To switch to the
empty frame type @kbd{C-t TAB}. Now let's pull the xterm window into
this empty frame. Type @kbd{C-t w} for a window listing. Find the
@samp{xterm} window. See the number beside it? Type @kbd{C-t} followed
by @samp{xterm}'s window number.

Another common activity is browsing the interwebs. Type @kbd{C-t !}.
The input bar pops up again. You can now run a shell command.  Let's
start a web browser: type @samp{firefox} into the input bar and press
return.

Unfortunately, @samp{firefox} probably isn't wide enough because it's
in one of the frames. Type @kbd{C-t Q} to remove all frames but the
current one and resize it to fit the screen.

For a full list of key bindings, @xref{List of Default Keybindings}.

@node Contact the StumpWM developers,  , Basic Usage, Introduction
@section Contact the StumpWM developers
The StumpWM home page is @url{http://stumpwm.nongnu.org/}.

You can reach Shawn Betts at @email{sabetts at vcn.bc.ca}.

The StumpWM mailing list is @email{stumpwm-devel@@nongnu.org} which
you can subscribe to at
@url{http://mail.nongnu.org/mailman/listinfo/stumpwm-devel}. Posting
is restricted to subscribers to keep spam out of the archives.

The StumpWM IRC channel can be found on Freenode at #stumpwm.



@node Key Bindings, Message and Input Bar, Introduction, Top
@chapter Key Bindings
StumpWM is controlled entirely by keystrokes and Lisp commands. It
mimics GNU Screen's keyboard handling. StumpWM's default prefix key is
@kbd{C-t}.

@deffn {Command} escape KEY
Set the prefix key. Here's how you would change the prefix key to @kbd{C-z}.

@example
escape C-z
@end example
@end deffn



@menu
* List of Default Keybindings::  
* Binding Keys::                
@end menu

@node List of Default Keybindings, Binding Keys, Key Bindings, Key Bindings
@section List of Default Keybindings
The following is a list of keybindings.

@table @kbd
@item C-t n
@itemx C-t C-n
@itemx C-t Space
Go to the next window in the window list

@item C-t p
@itemx C-t C-p
Go to the previous window in the window list

@item C-t '
Go to a window by name

@item C-t "
Select a window from a list and focus the window.

@itemx C-t C-g
Abort the current command. This is useful if you accidentally hit @kbd{C-t}

@item C-t w
List all the windows

@item C-t 0-9
Select a window by number

@item C-t f
Select a frame by number

@item C-t s
Split current frame vertically

@item C-t S
Split current frame horizontally

@item C-t k
@itemx C-t C-k
Sends a kill message to the current frame and the running program.

@item C-t K
Kills the current frame and running program; like a kill -9.

@item C-t c
@itemx C-t C-c
Run an X terminal; by default xterm

@item C-t e
@itemx C-t C-e
Run Emacs 

@item C-t t
Sends a @key{C-t} to the frame; this is useful for applications like Firefox
which make heavy use of @key{C-t} (in Firefox's case, for opening a new
tab). This is similar to how GNU screen uses @kbd{C-a a}.

@item C-t w
@itemx C-t C-w
Prints out a list of the windows, their number, and their name.

@item C-t b
@itemx C-t C-b
Banish the mouse point to the lower right corner of the screen.

@item C-t a
@itemx C-t C-a
Display the current time and date, much like the Unix command @command{date}.

@item C-t C-t
Switch to the last window to have focus in the current frame.

@item C-t !
Prompt for a shell command to run via @file{/bin/sh}. All output is discarded.

@item C-t R
If the screen is split into multiple frames, one split will be
undone. If there is only one split, the effect will be the same as @kbd{C-t Q}.

@item C-t o
If the screen is split into multiple frames, focus shifts to the
@command{next} frame, where it cycles to the right and then down; analogous
to @kbd{C-x o} in Emacs.

@item C-t TAB
Jump to the last frame that had focus.

@item C-t F
Display ``Current Frame'' in the frame which has focus.

@item C-t ;
Opens the input box. StumpWM commands can be run from here, and the
input history moved through.

@item C-t :
Opens the input box, but all things typed in here will be sent to the
Common Lisp interpreter where they will be ran as Lisp programs; thus,
input should be valid Common Lisp.

@item C-t C-h
@itemx C-t ?
The help.

@item C-t -
Hide all frames and show the root window.

@item C-t Q
Removes all splits and maximizes the frame with focus.

@item C-t Up
@itemx C-t Down
@itemx C-t Left
@itemx C-t Right
Shift focus to an adjacent frame in the specified direction. @kbd{C-t Up} will
shift focus up, if possible, @kbd{C-t Down} will shift downwards, etc.

@item C-t v
Prints out the version of the running StumpWM.

@item C-t #
Toggle the mark on the current window

@item C-t m
@itemx C-t C-m
Display the last message. Hitting this keybinding again displays the
message before that, and so on.

@item C-t G
Display all groups and windows in each group. For more information @xref{Groups}.

@item C-t F1
@itemx C-t F2
@itemx C-t F3
@itemx C-t F4
@itemx C-t F5
@itemx C-t F6
@itemx C-t F7
@itemx C-t F9
@itemx C-t F9
@itemx C-t F10
Jump to the corresponding group. @kbd{C-t F1} jumps to group 1 and so on.

@item C-t g g
Show the list of groups.

@item C-t g c
Create a new group.

@item C-t g n
@itemx C-t g C-n
@itemx C-t g SPC
@itemx C-t g C-SPC
Go to the next group in the list.

@item C-t g '
Select a group by name or by number.

@item C-t g m
Move the current window to the specified group.

@item C-t g k
Kill the current group. All windows are merged into the next group.

@item C-t g A
@itemx C-t g r
Change the current group's name.

@item C-t g 1
@itemx C-t g 2
@itemx C-t g 3
@itemx C-t g 4
@itemx C-t g 5
@itemx C-t g 6
@itemx C-t g 7
@itemx C-t g 8
@itemx C-t g 9
@itemx C-t g 0
Go to the corresonding group. @kbd{C-t g 1} jumps to group 1 and so on.

@item C-t +
Make frames the same height or width in the current frame's subtree.

@item C-t h k
Describe the specified key binding.

@item C-t h f
Describe the specified function.

@item C-t h v
Describe the specified variable.

@item C-t h w
List all key sequences that are bound to the specified command
@end table

@node Binding Keys,  , List of Default Keybindings, Key Bindings
@section Binding Keys

@defun define-key MAP KEY COMMAND
Add a keybinding mapping the key, @var{key}, to the command,
@var{command}, in the specified keymap. For example,

@example
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "C-z") "echo Zzzzz...")
@end example

Now when you type C-t C-z, you'll see the text ``Zzzzz...'' pop up.
@end defun

@defun undefine-key MAP KEY
Clear the key binding in the specified keybinding.
@end defun

@defun kbd KEYS
This compiles a key string into a key structure used by
`define-key', `undefine-key', `set-prefix-key' and
others.
@end defun

@defun set-prefix-key KEY
Change the stumpwm prefix key to KEY.
@example
(stumpwm:set-prefix-key (stumpwm:kbd "C-M-H-s-z"))
@end example

This will change the prefix key to @key{Control} + @key{Meta} + @key{Hyper} + @key{Super} +
the @key{z} key. By most standards, a terrible prefix key but it makes a
great example.
@end defun


@defun make-sparse-keymap 
Create an empty keymap. If you want to create a new list of bindings
in the key binding tree, this is where you start. To hang frame
related bindings off @kbd{C-t C-f} one might use the following code:

@example
(defvar *my-frame-bindings*
  (let ((m (stumpwm:make-sparse-keymap)))
    (stumpwm:define-key m (stumpwm:kbd "f") "curframe")
    (stumpwm:define-key m (stumpwm:kbd "M-b") "move-focus left")
    m ; NOTE: this is important
  ))

(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "C-f") '*my-frame-bindings*)
@end example
@end defun


@defvar *root-map*
This is the keymap by default bound to @kbd{C-t}. It is known as the @dfn{prefix map}.
@end defvar

@defvar *top-map*
The top level key map. This is where you'll find the binding for the
@dfn{prefix map}.
@end defvar

@defvar *groups-map*
The keymap that group related key bindings sit on. It is bound to @kbd{C-t g} by default.
@end defvar

 
@node Message and Input Bar, Windows, Key Bindings, Top
@chapter Message and Input Bar

@deffn {Command} echo STRING
Display @var{string} in the message bar.
@end deffn

@deffn {Command} colon INITIAL-INPUT
Read a command from the user. @var{initial-text} is optional. When
supplied, the text will appear in the prompt.
@end deffn


@menu
* Customizing The Bar::         
* Using The Input Bar::         
* Programming The Message Bar::  
* Programming the Input Bar::   
@end menu

@node Customizing The Bar, Using The Input Bar, Message and Input Bar, Message and Input Bar
@section Customizing The Bar
The bar's appearance and behavior can be modified with the following
functions and variables.

@defun set-fg-color COLOR
Set the foreground color for the message bar and input
bar. @var{color} can be any color recognized by X.
@end defun

@defun set-bg-color COLOR
Set the background color for the message bar and input
bar. @var{color} can be any color recognized by X.
@end defun

@defun set-border-color COLOR
Set the border color for the message bar and input
bar. @var{color} can be any color recognized by X.
@end defun

@defun set-msg-border-width WIDTH
Set the border width for the message bar and input
bar.
@end defun

@defun set-font FONT
Set the font for the message bar and input bar.
@end defun


@defvar *message-window-padding*
The number of pixels that pad the text in the message window.
@end defvar

@defvar *message-window-gravity*
This variable controls where the message window appears. The follow
are valid values.
@table @asis
@item :top-left
@item :top-right
@item :bottom-left
@item :bottom-right
@item :center
@end table
@end defvar

@defvar *timeout-wait*
Specifies, in seconds, how long a message will appear for. This must
be an integer.
@end defvar

@defvar *input-window-gravity*
This variable controls where the input window appears. The follow
are valid values.
@table @asis
@item :top-left
@item :top-right
@item :bottom-left
@item :bottom-right
@item :center
@end table
@end defvar


@node Using The Input Bar, Programming The Message Bar, Customizing The Bar, Message and Input Bar
@section Using The Input Bar

The following is a list of keybindings for the input bar.

@table @kbd
@item DEL
delete-backward-char

@item M-DEL
backward-kill-word

@item C-d
@itemx Delete
delete-forward-char

@item M-d
forward-kill-word

@item C-f
@itemx Right
forward-char

@item M-f
forward-word

@item C-b
@itemx Left
backward-char

@item M-b
backward-word

@item C-a
@itemx Home
move-beginning-of-line

@item C-e
@itemx End
move-end-of-line

@item C-k
kill-line

@item C-u
kill-to-beginning

@item C-p
@itemx Up
history-back

@item C-n
@itemx Down
history-forward

@item RET
submit

@item C-g
abort

@item C-y
yank-selection

@item TAB
Clockwise tab complete the current string, if possible. Press @key{TAB} again to
cycle through completions.
 
@item S-TAB
Counter-clockwise tab complete the current string, if possible. Press @key{S-TAB} again to
cycle through completions.

@end table

@node Programming The Message Bar, Programming the Input Bar, Using The Input Bar, Message and Input Bar
@section Programming The Message Bar

@defun echo-string SCREEN MSG
Display @var{string} in the message bar on @var{screen}. You almost always want to use @command{message}.
@end defun

@defun message FMT &REST ARGS
run FMT and ARGS through `format' and echo the result to the current screen.
@end defun


@node Programming the Input Bar,  , Programming The Message Bar, Message and Input Bar
@section Programming the Input Bar
New input behavior can be added to the input bar by creating editing
functions and binding them to keys in the @var{*input-map*} using
@command{define-key}, just like other key bindings.

An input function takes 2 arguments: the input structure and the key pressed.

@defun read-one-line SCREEN PROMPT &OPTIONAL (INITIAL-INPUT )
Read a line of input through stumpwm and return it. returns nil if the user aborted.
@end defun

@defun read-one-char SCREEN
Read a single character from the user.
@end defun

@defun completing-read SCREEN PROMPT COMPLETIONS &OPTIONAL (INITIAL-INPUT )
Read a line of input through stumpwm and return it with TAB
completion. completions can be a list, an fbound symbol, or a
function. if its an fbound symbol or a function then that
function is passed the substring to complete on and is expected
to return a list of matches.
@end defun

@defun input-insert-string INPUT STRING
Insert @var{string} into the input at the current
position. @var{input} must be of type @var{input-line}. Input
functions are passed this structure as their first argument.
@end defun

@defun input-insert-char INPUT CHAR
Insert @var{char} into the input at the current
position. @var{input} must be of type @var{input-line}. Input
functions are passed this structure as their first argument.
@end defun


@defvar *input-map*
This is the keymap containing all input editing key bindings.
@end defvar


@node Windows, Frames, Message and Input Bar, Top
@chapter Windows

@deffn {Command} next 
Go to the next window in the window list.
@end deffn

@deffn {Command} pull-hidden-next 
Pull the next hidden window into the current frame.
@end deffn

@deffn {Command} prev 
Go to the previous window in the window list.
@end deffn

@deffn {Command} pull-hidden-previous 
Pull the next hidden window into the current frame.
@end deffn

@deffn {Command} delete 
Delete the current window. This is a request sent to the window. The
window's client may decide not to grant the request or may not be able
to if it is unresponsive.
@end deffn

@deffn {Command} kill 
`Tell X to disconnect the client that owns the current window. if
@command{delete} didn't work, try this.
@end deffn

@deffn {Command} windows FMT
Display a list of managed windows. The optional argument @var{fmt} can
be used to override the default window formatting.
@end deffn

@deffn {Command} other 
Switch to the window last focused.
@end deffn

@deffn {Command} pull-hidden-other 
Pull the last focused, hidden window into the current frame.
@end deffn

@deffn {Command} number N
Change the window's number to the specified number. If another window
is using the number, then the windows swap numbers.
@end deffn

@deffn {Command} meta KEY
Send a fake key to the current window. @var{key} is a typical StumpWM key, like @kbd{C-M-o}.
@end deffn

@deffn {Command} select WIN
Switch to the first window that starts with @var{win}.
@end deffn

@deffn {Command} windowlist FMT
Allow the user to Select a window from the list of windows and focus
the selected window. For information of menu bindings
@xref{Menus}. The optional argument @var{fmt} can be specified to
override the default window formatting.
@end deffn


@defvar *window-format*
This variable decides how the window list is formatted. It is a string
with the following formatting options:

@table @asis
@item %n
Substitute the window number.
@item %s
Substitute the window's status. * means current window, + means last
window, and - means any other window.
@item %t
Substitute the window's name.
@item %c
Substitute the window's class.
@item %i
Substitute the window's resource ID.
@item %m
Draw a # if the window is marked.
@end table

Note, a prefix number can be used to crop the argument to a specified
size. For instance, @samp{%20t} crops the window's title to 20
characters.
@end defvar

@defvar *window-name-source*
This variable controls what is used for the window's name. The default is @code{:title}.

@table @code
@item :title
Use the window's title given to it by its owner.

@item :class
Use the window's resource class.

@item :resource-name
Use the window's resource name.
@end table
@end defvar

@defvar *new-window-prefered-frame*
This variable controls what frame a new window appears in. It is a
list of preferences. The first preference that is satisfied is
used. Valid list elements are as follows:

@table @code
@item :focused
Choose the focused frame.

@item :last
Choose the last focused frame.

@item :empty
Choose any empty frame.

@item :unfocused
Choose any unfocused frame.
@end table

Alternatively, it can be set to a function that takes one argument,
the new window, and returns the prefered frame.
@end defvar


@menu
* Window Marks::                
* Customizing Window Appearance::  
* Controlling Raise And Map Requests::  
* Programming With Windows::    
@end menu

@node Window Marks, Customizing Window Appearance, Windows, Windows
@section Window Marks
Windows can be marked. A marked window has a # beside it in the window
list. Some commands operate only on marked windows.

@deffn {Command} mark 
Toggle the current window's mark.
@end deffn

@deffn {Command} clear-marks 
Clear all marks in the current group.
@end deffn

@deffn {Command} pull-marked 
Pull all marked windows into the current frame and clear the marks.
@end deffn


@node Customizing Window Appearance, Controlling Raise And Map Requests, Window Marks, Windows
@section Customizing Window Appearance

@defvar *maxsize-border-width*
The width in pixels given to the borders of windows with maxsize or ratio hints.
@end defvar

@defvar *transient-border-width*
The width in pixels given to the borders of transient or pop-up windows.
@end defvar

@defvar *normal-border-width*
The width in pixels given to the borders of regular windows.
@end defvar


@defun set-win-bg-color COLOR
Set the background color of the window. The background color will only
be visible for windows with size increment hints such as @samp{emacs}
and @samp{xterm}.
@end defun

@defun set-normal-gravity GRAVITY
Set the default gravity for normal windows. Possible values are
@code{:center} @code{:top} @code{:left} @code{:right} @code{:bottom}
@code{:top-left} @code{:top-right} @code{:bottom-left} and
@code{:bottom-right}.
@end defun

@defun set-maxsize-gravity GRAVITY
Set the default gravity for maxsize windows.
@end defun

@defun set-transient-gravity GRAVITY
Set the default gravity for transient/pop-up windows.
@end defun


@deffn {Command} gravity GRAVITY
NIL
@end deffn



@node Controlling Raise And Map Requests, Programming With Windows, Customizing Window Appearance, Windows
@section Controlling Raise And Map Requests
It is sometimes handy to deny a window's request to be focused. The
following variables determine such behavior.

A map request occurs when a new or withdrawn window requests to be
mapped for the first time.

A raise request occurs when a client asks the window manager to give
an existing window focus.

@defvar *deny-map-request*
A list of window properties that stumpwm should deny matching windows'
requests to become mapped for the first time.
@end defvar

@defvar *deny-raise-request*
Exactly the same as @var{*deny-map-request*} but for raise requests.

Note that no denial message is displayed if the window is already visible.
@end defvar

@defvar *suppress-deny-messages*
For complete focus on the task at hand, set this to @code{T} and no
raise/map denial messages will be seen.
@end defvar


Some examples follow.

@example
;; Deny the firefox window from taking focus when clicked upon.
(push '(:class "gecko") stumpwm:*deny-raise-request*)

;; Deny all map requests
(setf stumpwm:*deny-map-request* t)

;; Deny transient raise requests
(push '(:transient) stumpwm:*deny-map-request*)

;; Deny the all windows in the xterm class from taking focus.
(push '(:class "Xterm") stumpwm:*deny-raise-request*)
@end example

@node Programming With Windows,  , Controlling Raise And Map Requests, Windows
@section Programming With Windows

@defmac def-window-attr @var{attr}
Create a new window attribute and corresponding get/set functions.
@end defmac

@defun window-send-string WINDOW STRING
Send the string of characters to the window as if they'd been typed.
@end defun


@node Frames, Mode-line, Windows, Top
@chapter Frames
Frames contain windows. All windows exist within a frame.

Those used to ratpoison will notice that this differs from ratpoison's
window pool, where windows and frames are not so tightly connected.

@deffn {Command} pull WINDOW-NUMBER
Move the window whose number is @var{window-number} to the current frame.
@end deffn

@deffn {Command} hsplit 
Split the current frame into 2 side-by-side frames.
@end deffn

@deffn {Command} vsplit 
Split the current frame into 2 frames, one on top of the other.
@end deffn

@deffn {Command} remove 
Remove the current frame. Windows in the frame are migrated to the
frame taking up its space.
@end deffn

@deffn {Command} only 
Delete all the frames but the current one and grow it to take up the entire head.
@end deffn

@deffn {Command} curframe 
Display a window indicating which frame is focused.
@end deffn

@deffn {Command} fnext 
Cycle through the frame tree to the next frame.
@end deffn

@deffn {Command} sibling 
Jump to the frame's sibling. If a frame is split into twe frames,
these two frames are siblings.
@end deffn

@deffn {Command} fother 
Jump to the last frame that had focus.
@end deffn

@deffn {Command} fselect FRAME-NUMBER
Display a number in the corner of each frame and let the user to
select a frame by number. If @var{frame-number} is specified, just
jump to that frame.
@end deffn

@deffn {Command} resize WIDTH HEIGHT
Resize the current frame by @var{width} and @var{height} pixels
@end deffn

@deffn {Command} balance-frames 
Make frames the same height or width in the current frame's subtree.
@end deffn

@deffn {Command} fclear 
Clear the current frame.
@end deffn

@deffn {Command} move-focus DIR
Focus the frame adjacent to the current one in the specified
direction. The following are valid directions:
@table @asis
@item up
@item down
@item left
@item right
@end table
@end deffn

@deffn {Command} move-window DIR
Just like move-focus except that the current is pulled along.
@end deffn

@deffn {Command} next-in-frame 
Go to the next window in the current frame.
@end deffn

@deffn {Command} prev-in-frame 
Go to the previous window in the current frame.
@end deffn

@deffn {Command} other-in-frame 
Go to the last accessed window in the current frame.
@end deffn


@defvar *min-frame-width*
The minimum width a frame can be. A frame will not shrink below this
width. Splitting will not affect frames if the new frame widths are
less than this value.
@end defvar

@defvar *min-frame-height*
The minimum height a frame can be. A frame will not shrink below this
height. Splitting will not affect frames if the new frame heights are
less than this value.
@end defvar

@defvar *new-frame-action*
When a new frame is created, this variable controls what is put in the
new frame. Valid values are 

@table @code
@item :empty
The frame is left empty

@item :last-window
The last focused window that is not currently visible is placed in the
frame. This is the default.
@end table
@end defvar


@node Mode-line, Groups, Frames, Top
@chapter The Mode Line
The mode line is a bar that runs across either the top or bottom of
a head and is used to display information. By default the mode line
displays the list of windows, similar to the output C-t w produces.

Alternatively, external panel applications such as the GNOME panel and
KDE's kicker may be used. Simply starting one of these programs is enough
to set it as the mode line of the head it would like to be on (if the
panel is Xinerama aware) or whichever head is available. In order to
avoid problems displaying menus, configure your panel application for
positioning at the top or bottom of the head rather than relying on
@var{*mode-line-position*}

The mode line can be turned on and off with the @command{mode-line}
command or the lisp function @code{stumpwm:toggle-mode-line}. Each
head has its own mode line. For example:

@example
;; turn on/off the mode line for the current head only.
(stumpwm:toggle-mode-line (stumpwm:current-screen) (stumpwm:current-head))
@end example

The mode line is updated after every StumpWM command.

To display the window list and the current date on the modeline, one
might do the following:

@example
(setf stumpwm:*screen-mode-line-format*
      (list "%w | "
            '(:eval (stumpwm:run-shell-command "date" t))))
@end example

@code{(stumpwm:run-shell-command "date" t)} runs the command
@command{date} and returns its output as a string.

@deffn {Command} mode-line 
A command to toggle the mode line visibility.
@end deffn


@defun toggle-mode-line SCREEN HEAD &OPTIONAL (FORMAT (QUOTE *SCREEN-MODE-LINE-FORMAT*))
Toggle the state of the mode line for the specified screen
@end defun


@defvar *screen-mode-line-format*
This variable describes what will be displayed on the modeline for each screen. 
Turn it on with the function TOGGLE-MODE-LINE or the mode-line command. 

It is a list where each element may be a string, a symbol, or a list.

For a symbol its value is used.

For a list of the form (:eval FORM) FORM is evaluated and the
result is used as a mode line element.

If it is a string the string is printed with the following formatting
options:

@table @asis
@item %h
List the number of the head the mode-line belongs to

@item %w
List all windows in the current group windows using @var{*window-format*}

@item %W
List all windows on the current head of the current group using
@var{*window-format*}

@item %g
List the groups using @var{*group-format*}
@end table
@end defvar


The following variables control the color, position, and size of the
mode line.

@defvar *mode-line-position*
Specifies where the mode line is displayed. Valid values are :top and :bottom.
@end defvar

@defvar *mode-line-border-width* 1
NIL
@end defvar

@defvar *mode-line-pad-x* 
NIL
@end defvar

@defvar *mode-line-pad-y* 
NIL
@end defvar

@defvar *mode-line-background-color* 
NIL
@end defvar

@defvar *mode-line-foreground-color* 
NIL
@end defvar

@defvar *mode-line-border-color* 
NIL
@end defvar

@defvar *mode-line-timeout*
The modeline updates after each command, when a new window appears or
an existing one disappears, and on a timer. This variable controls how
many seconds elapse between each update. If this variable is changed
while the modeline is visible, you must toggle the modeline to update
timer.
@end defvar


@node Groups, Screens, Mode-line, Top
@chapter Groups
Groups in StumpWM are more commonly known as @dfn{virtual desktops} or
@dfn{workspaces}. Why not create a new term for it?

@deffn {Command} gnew NAME
Create a new group with the specified name. The new group becomes the
current group. If @var{name} begins with a dot (``.'') the group new
group will be created in the hidden state. Hidden groups have group
numbers less than one and are invisible to from gprev, gnext, and, optionally,
groups and vgroups commands.
@end deffn

@deffn {Command} gnewbg NAME
Create a new group but do not switch to it.
@end deffn

@deffn {Command} gnext 
Cycle to the next group in the group list.
@end deffn

@deffn {Command} gprev 
Cycle to the previous group in the group list.
@end deffn

@deffn {Command} gmerge FROM
Merge @var{from} into the current group. @var{from} is not deleted.
@end deffn

@deffn {Command} groups FMT
Display the list of groups with their number and
name. @var{*group-format*} controls the formatting. The optional
argument @var{fmt} can be used to override the default group
formatting.
@end deffn

@deffn {Command} vgroups GFMT WFMT
Like @command{groups} but also display the windows in each group. The
optional arguments @var{gfmt} and @var{wfmt} can be used to override
the default group formatting and window formatting, respectively.
@end deffn

@deffn {Command} gselect TO-GROUP
Select the first group that starts with
@var{substring}. @var{substring} can also be a number, in which case
@command{gselect} selects the group with that number.
@end deffn

@deffn {Command} gmove TO-GROUP
Move the current window to the specified group.
@end deffn

@deffn {Command} gkill 
Kill the current group. All windows in the current group are migrated
to the next group.
@end deffn

@deffn {Command} grename NAME
Rename the current group.
@end deffn


@menu
* Customizing Groups::          
@end menu

@node Customizing Groups,  , Groups, Groups
@section Customizing Groups

@defvar *group-formatters*
An alist of characters and formatter functions. The character can be
used as a format character in @var{*group-format*}. When the character
is encountered in the string, the corresponding function is called
with a group as an argument. The functions return value is inserted
into the string. If the return value isn't a string it is converted to
one using @code{prin1-to-string}.
@end defvar

@defvar *group-format*
The format string that decides what information will show up in the
group listing. The following format options are available:

@table @asis
@item %n
The group's number.

@item %s
The group's status. Similar to a window's status.

@item %t
The group's name.
@end table
@end defvar


@defun current-group &OPTIONAL (SCREEN (CURRENT-SCREEN))
Return the current group for the current screen, unless
otherwise specified.
@end defun


@node Screens, Interacting With Unix, Groups, Top
@chapter Screens
StumpWM handles multiple screens.

@deffn {Command} snext 
Go to the next screen.
@end deffn

@deffn {Command} sprev 
Go to the previous screen.
@end deffn

@deffn {Command} sother 
Go to the last screen.
@end deffn


@menu
* Xinerama::                    
* Programming With Screens::    
@end menu

@node Xinerama, Programming With Screens, Screens, Screens
@section Xinerama
StumpWM will attempt to detect Xinerama heads at startup (and at no other
time.) Heads are logically contained by screens. In a dual-monitor Xinerama
configuration, there will be one screen with two heads. Non-rectangular layouts
are supported (frames will not be created in the 'dead zone'.) And message
windows will be displayed on the current head--that is, the head to which the
currently focused frame belongs.

@node Programming With Screens,  , Xinerama, Screens
@section Programming With Screens

@defun current-screen 
Return the current screen.
@end defun


@defun screen-current-window SCREEN
Return the current window on the specified screen
@end defun


@defun current-window 
Return the current window on the current screen
@end defun


@defvar *screen-list*
The list of screens managed by stumpwm.
@end defvar

        
@node Interacting With Unix, Interacting With X11, Screens, Top
@chapter Interacting With Unix

@deffn {Command} exec CMD
Run the shell command asynchronously. Output is discarded.
@end deffn


@defun run-shell-command CMD &OPTIONAL COLLECT-OUTPUT-P
Run the specified shell command. If @var{collect-output-p} is @code{T}
then run the command synchonously and collect the output. Be
careful. If the shell command doesn't return, it will hang StumpWM. In
such a case, kill the shell command to resume StumpWM.
@end defun

@defun programs-in-path BASE &OPTIONAL FULL-PATH (PATH (SPLIT-STRING (GETENV PATH) :))
Return a list of programs in the path that start with @var{base}. if
@var{full-path} is @var{t} then return the full path, otherwise just
return the filename. @var{path} is by default the @env{PATH}
evironment variable but can be specified. It should be a string containing
each directory seperated by a colon.
@end defun

@defun pathname-is-executable-p PATHNAME
Return T if the pathname describes an executable file.
@end defun


@defvar *shell-program*
The shell program used by @code{run-shell-command}.
@end defvar


@defun getenv VAR
Return the value of the environment variable.
@end defun

@defun (setf getenv) VAL VAR
Set the value of the environment variable, @var{var} to @var{val}.
@end defun


@node Interacting With X11, Miscellaneous Commands, Interacting With Unix, Top
@chapter Interacting With X11

@defun set-x-selection TEXT
Set the X11 selection string to @var{string}.
@end defun

@defun get-x-selection &OPTIONAL TIMEOUT
Return the x selection no matter what client own it.
@end defun


@node Miscellaneous Commands, Hooks, Interacting With X11, Top
@chapter Miscellaneous Commands
The following is a list of commands that don't really fit in any other
section.

@deffn {Command} banish WHERE
Warp the mouse the lower right corner of the current head.
@end deffn

@deffn {Command} ratwarp X Y
Warp the mouse to the specified location.
@end deffn

@deffn {Command} ratrelwarp DX DY
Warp the mouse by the specified amount from its current position.
@end deffn

@deffn {Command} time 
Display time.
@end deffn

@deffn {Command} eval CMD
Evaluate the lisp s-expression and display the result.
@end deffn

@deffn {Command} insert STRING
Send the string of characters to the current window as if they'd been typed.
@end deffn

@deffn {Command} reload 
Reload StumpWM using @code{asdf}.
@end deffn

@deffn {Command} loadrc 
Reload the @file{~/.stumpwmrc} file.
@end deffn

@deffn {Command} help 
Display all the bindings in @var{*root-map*}.
@end deffn

@deffn {Command} abort 
Do nothing.
@end deffn

@deffn {Command} quit 
Quit StumpWM.
@end deffn

@deffn {Command} getsel 
Echo the X selection.
@end deffn

@deffn {Command} putsel STRING
Stuff the string @var{string} into the X selection.
@end deffn

@deffn {Command} command-mode 
Command mode allows you to type ratpoison commands without needing the
@key{C-t} prefix. Keys not bound in StumpWM will still get sent to the
current window. To exit command mode, type @key{C-g}.
@end deffn

@defun run-commands &REST COMMANDS
Run each stumpwm command in sequence. This could be used if you're
used to ratpoison's rc file and you just want to run commands or don't
know lisp very well. One might put the following in one's rc file:

@example
(stumpwm:run-commands
  "escape C-z"
  "exec firefox"
  "split")
@end example
@end defun


@defmac define-stumpwm-command @var{name} ((@var{var} @var{type} @var{prompt}) ...) &body @var{body}
Create a new command with the name @var{name}. @var{prompt} is
optional. If left out, stumpwm will not prompt for the variable and it
will be set to nil.
@end defmac

@defmac define-stumpwm-type @var{type} (@var{input} @var{prompt}) &body @var{body}
Create a new type that can be used for command arguments. @var{type} can be any symbol. 

When @var{body} is evaluated @var{input} is bound to the
argument-line. It is passed to @code{argument-pop},
@code{argument-pop-rest}, etc. @var{prompt} is the prompt that should
be used when prompting the user for the argument.

@example
(define-stumpwm-type :symbol (input prompt)
 (or (find-symbol (string-upcase
		     (or (argument-pop input)
                         ;; Whitespace messes up find-symbol.
		         (string-trim " "
		           (completing-read (current-screen)
					  prompt
					  ;; find all symbols in the
					  ;;  stumpwm package.
					  (let (acc)
					    (do-symbols (s (find-package "STUMPWM"))
					      (push (string-downcase (symbol-name s)) acc))
					    acc)))
                      (throw 'error "Abort.")))
                  "STUMPWM")
     (throw 'error "Symbol not in STUMPWM package")))

(define-stumpwm-command "symbol" ((sym :symbol "Pick a symbol: "))
  (message "~a" (with-output-to-string (s)
	          (describe sym s))))
@end example

This code creates a new type called @code{:symbol} which finds the
symbol in the stumpwm package. The command @code{symbol} uses it and
then describes the symbol.

@end defmac

@defun run-or-raise CMD PROPS &OPTIONAL (ALL-GROUPS *RUN-OR-RAISE-ALL-GROUPS*) (ALL-SCREENS *RUN-OR-RAISE-ALL-SCREENS*)
Run the shell command, @var{cmd}, unless an existing window
matches @var{props}. @var{props} is a property list with the following keys:

@table @code
@item :class
Match the window's class.
@item :instance
Match the window's instance or resource-name.
@item :role
Match the window's @code{WM_WINDOW_ROLE}.
@item :title
Match the window's title.
@end table

By default, the global @var{*run-or-raise-all-groups*} decides whether
to search all groups or the current one for a running
instance. @var{all-groups} overrides this default. Similarily for
@var{*run-or-raise-all-screens*} and @var{all-screens}.
@end defun


@defvar *run-or-raise-all-groups*
When this is @code{T} the @code{run-or-raise} function searches all groups for a
running instance. Set it to NIL to search only the current group.
@end defvar

@defvar *run-or-raise-all-screens*
When this is @code{T} the @code{run-or-raise} function searches all screens for a
running instance. Set it to @code{NIL} to search only the current screen. If
@var{*run-or-raise-all-groups*} is @code{NIL} this variable has no effect.
@end defvar


@defun restarts-menu ERR
Display a menu with the active restarts and let the user pick
one. Error is the error being recovered from. If the user aborts the
menu, the error is re-signalled.
@end defun


@defmac with-restarts-menu &body @var{body}
Execute @var{body}. If an error occurs inside @var{body} then call
restarts-menu on it.
@end defmac

@defvar *startup-message*
This is the message StumpWM displays when it starts. Set it to NIL to
suppress.
@end defvar

@defvar *suppress-abort-messages*
Suppress abort message when non-nil.
@end defvar

@defvar *default-package*
This is the package eval reads and executes in. You might want to set
this to @code{:stumpwm} if you find yourself using a lot of internal
stumpwm symbols. Setting this variable anywhere but in your rc file
will have no effect.
@end defvar


@menu
* Menus::                       
* Debugging StumpWM::           
* Timers::                      
* Getting Help::                
@end menu

@node Menus, Debugging StumpWM, Miscellaneous Commands, Miscellaneous Commands
@section Menus
Some commands present the options in a menu. The following are the menu key bindings:

@table @kbd
@item C-p
@itemx Up
@itemx k
Highlight the previous menu option.

@item C-n
@itemx Down
@itemx j
Highlight the next menu option.

@item C-g
@itemx ESC
Abort the menu.

@item RET
Select the highlighted option.

@end table

@node Debugging StumpWM, Timers, Menus, Miscellaneous Commands
@section Debugging StumpWM

@defvar *debug-level*
Set this variable to a number > 0 to turn on debugging. The greater the number the more debugging output.
@end defvar

@defvar *debug-stream*
This is the stream debugging output is sent to. It defaults to
*error-output*. It may be more convenient for you to pipe debugging
output directly to a file.
@end defvar


@node Timers, Getting Help, Debugging StumpWM, Miscellaneous Commands
@section Timers
StumpWM has a timer system similar to that of @dfn{Emacs}.

@defun run-with-timer SECS REPEAT FUNCTION &REST ARGS
Perform an action after a delay of SECS seconds.
Repeat the action every REPEAT seconds, if repeat is non-nil.
SECS and REPEAT may be reals.
The action is to call FUNCTION with arguments ARGS.
@end defun

@defun cancel-timer TIMER
Remove TIMER from the list of active timers.
@end defun


@defun timer-p @var{timer}
Return T if TIMER is a timer structure.
@end defun

@node Getting Help,  , Timers, Miscellaneous Commands
@section Getting Help

@deffn {Command} describe-key KEYS
Either interactively type the key sequence or supply it as text. This
command prints the command bound to the specified key sequence.
@end deffn

@deffn {Command} describe-variable VAR
Print the online help associated with the specified variable.
@end deffn

@deffn {Command} describe-function FN
Print the online help associated with the specified function.
@end deffn

@deffn {Command} where-is CMD
Print the key sequences bound to the specified command.
@end deffn


@node Hooks, Command and Function Index, Miscellaneous Commands, Top
@chapter Hooks
StumpWM exports a number of hooks you can use to add customizations;
like hooks in Emacs, you add to a hook with the @code{add-hook}
function. for example:

@example
(stumpwm:add-hook 'stumpwm:*new-window-hook* 'my-new-window-custos)
@end example

adds your @code{my-new-window-custos} function to the list of
functions called when a new window appears.

@defmac add-hook @var{hook-variable} @var{function}
Add @var{function} to the hook @var{hook-variable}. For example, to
display a message whenever you switch frames:

@example
(defun my-rad-fn (from-frame to-frame)
  (stumpwm:message "Mustard!"))

(stumpmwm:add-hook stumpwm:*focus-frame-hook* 'my-rad-fn)
@end example
@end defmac

It is not recommended you add lambda functions or function objects to
a hook as they are difficult to remove.

@defmac remove-hook @var{hook-variable} @var{function}
Remove the specified function from the hook.
@end defmac

The following hooks are available:

@defvr {Hook} *new-window-hook*
A hook called whenever a window is added to the window list. This
includes a genuinely new window as well as bringing a withdrawn window
back into the window list.
@end defvr

@defvr {Hook} *destroy-window-hook*
A hook called whenever a window is destroyed or withdrawn.
@end defvr

@defvr {Hook} *focus-window-hook*
A hook called when a window is given focus. It is called with 2
arguments: the current window and the last window (could be nil).
@end defvr

@defvr {Hook} *place-window-hook*
A hook called whenever a window is placed by rule. Arguments are
window group and frame
@end defvr

@defvr {Hook} *start-hook*
A hook called when stumpwm starts.
@end defvr

@defvr {Hook} *internal-loop-hook*
A hook called inside stumpwm's inner loop.
@end defvr

@defvr {Hook} *focus-frame-hook*
A hook called when a frame is given focus. The hook functions are
called with 2 arguments: the current frame and the last frame.
@end defvr

@defvr {Hook} *new-frame-hook*
A hook called when a new frame is created. the hook is called with
the frame as an argument.
@end defvr

@defvr {Hook} *message-hook*
A hook called whenever stumpwm displays a message. The hook
function is passed any number of arguments. Each argument is a
line of text.
@end defvr

@defvr {Hook} *top-level-error-hook*
Called when a top level error occurs. Note that this hook is
run before the error is dealt with according to
*top-level-error-action*.
@end defvr

@defvr {Hook} *focus-group-hook*
A hook called whenever stumpwm switches groups. It is called with 2 arguments: the current group and the last group.
@end defvr

@defvr {Hook} *key-press-hook*
A hook called whenever a key under *top-map* is pressed.
It is called with 3 argument: the key, the (possibly incomplete) key
sequence it is a part of, and command value bound to the key.
@end defvr

@defvr {Hook} *root-click-hook*
A hook called whenever there is a mouse click on the root
window. Called with 4 arguments, the screen containing the root
window, the button clicked, and the x and y of the pointer.
@end defvr

@defvr {Hook} *mode-line-click-hook*
Called whenever the mode-line is clicked. It is called with 4 arguments,
the mode-line, the button clicked, and the x and y of the pointer.
@end defvr


@node Command and Function Index, Variable Index, Hooks, Top
@unnumbered Command and Function Index
@printindex fn

@node Variable Index,  , Command and Function Index, Top
@unnumbered Variable Index
@printindex vr

@bye
