\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename stumpwm.info
@settitle stumpwm manual
@setchapternewpage odd
@c %**end of header

@dircategory X11
@direntry
* stumpwm: (stumpwm).       A Common Lisp window manager
@end direntry

@ifinfo
This is the Stump Window Manager user manual.

Copyright @copyright{} 2000, 2001 Shawn Betts

Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and
this permission notice are preserved on all copies.

@ignore
Permission is granted to process this file through TeX
and print the results, provided the printed document
carries a copying permission notice identical to this
one except for the removal of this paragraph (this
paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified
versions of this manual under the conditions for
verbatim copying, provided also that the sections
entitled ``Copying'' and ``GNU General Public License''
are included exactly as in the original, and provided
that the entire resulting derived work is distributed
under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute
translations of this manual into another language,
under the above conditions for modified versions,
except that this permission notice may be stated in a
translation approved by the Free Software Foundation.
@end ifinfo

@titlepage
@sp 10
@titlefont{The Stump Window Manager}
@author Shawn Betts

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2000, 2001 Shawn Betts

Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and
this permission notice are preserved on all copies.

Permission is granted to copy and distribute modified
versions of this manual under the conditions for
verbatim copying, provided also that the sections
entitled ``Copying'' and ``GNU General Public License''
are included exactly as in the original, and provided
that the entire resulting derived work is distributed
under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute
translations of this manual into another language,
under the above conditions for modified versions,
except that this permission notice may be stated in a
translation approved by the Free Software Foundation.
@end titlepage

@node Top, Introduction, (dir), (dir)

@ifinfo
This document explains how to use The Stump Window Manager.
@end ifinfo

@menu
* Introduction::                
* Key Bindings::                
* Message and Input Bar::       
* Windows::                     
* Frames::                      
* Mode-line::                   
* Interacting With Unix::       
* Interacting With X11::        
* Miscellaneous Commands::      
* Hooks::                       
* Command and Function Index::  
* Variable Index::              

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Starting StumpWM::            
* Contact the Stumpwm developers::  

Key Bindings

* List of Default Keybindings::  
* Binding Keys::                

Message and Input Bar

* Customizing The Bar::         
* Using The Input Bar::         
* Programming The Message Bar::  
* Programming the Input Bar::   

Windows

* Customizing Window Appearance::  

@end detailmenu
@end menu

@node Introduction, Key Bindings, Top, Top
@chapter Introduction
Stumpwm is an X11 window manager written entirely in Common Lisp. It's
user interface goals are similar to ratpoison's but with an emphasis on
customizability, completeness, and cushiness.

@menu
* Starting StumpWM::            
* Contact the Stumpwm developers::  
@end menu

@node Starting StumpWM, Contact the Stumpwm developers, Introduction, Introduction
@section Starting StumpWM
There are a number of ways to start Stumpwm but possibly the most
straight forward method is as follows. This assumes you have a copy of
the stumpwm source code.

@enumerate
@item
Install @emph{SBCL} and the @emph{portable-clx} package.

@item
in the file @file{~/.sbclrc} insert:

@example
;;; If the first user-processable command-line argument is a filename,
;;; disable the debugger, load the file handling shebang-line and quit.
(let ((script (and (second *posix-argv*)
                   (probe-file (second *posix-argv*)))))
  (when script
    ;; Handle shebang-line
    (set-dispatch-macro-character #\# #\!
                                  (lambda (stream char arg)
                                    (declare (ignore char arg))
                                    (read-line stream)))
    ;; Disable debugger
    (setf *invoke-debugger-hook*
          (lambda (condition hook)
            (declare (ignore hook))
            ;; Uncomment to get backtraces on errors
            ;; (sb-debug:backtrace 20)
            (format *error-output* "Error: ~A~%" condition)
            (quit)))
    (load script)
    (quit)))
@end example

This allows sbcl to act as part of a command-line script.

@item
Create a symlink in @file{~/.sbcl/systems/} to point to the
@file{stumpwm.asd} file, included in the stumpwm source. Now
@emph{SBCL} knows how to load stumpwm.

@item
In your @file{~/.xinitrc} file include the line
@command{/path/to/stumpwm.sbcl}. Remember to replace @samp{/path/to/}
with the actual path. @command{stumpwm.sbcl} is included in the
stumpwm source.

@item
Finally, start X windows with @command{startx}. Cross your fingers. It
may take some time for @emph{SBCL} to finish compiling stumpwm. This
only happens once. Subsequent start ups should be much
faster. Eventually you should see a @samp{Welcome To the Stump Window Manager}
message pop up. At this point, you have successfully started
stumpwm.
@end enumerate

@node Contact the Stumpwm developers,  , Starting StumpWM, Introduction
@section Contact the Stumpwm developers
The Stumpwm home page is @url{http://stumpwm.nongnu.org/}.

You can reach Shawn Betts at @email{sabetts at vcn.bc.ca}.

The Stumpwm mailing list is @email{stumpwm-devel@@nongnu.org} which
you can subscribe to at
@url{http://mail.nongnu.org/mailman/listinfo/stumpwm-devel}. Posting
is restricted to subscribers to keep spam out of the archives.

The Stumpwm IRC channel can be found on Freenode at #stumpwm.



@node Key Bindings, Message and Input Bar, Introduction, Top
@chapter Key Bindings
Stumpwm is controlled entirely by keystrokes and Lisp commands. It
mimics GNU Screen's keyboard handling. Stumpwm's default prefix key is
@kbd{C-t}. The full list of Stumpwm commands can be found in
user.lisp.

@menu
* List of Default Keybindings::  
* Binding Keys::                
@end menu


@deffn {Command} escape @var{key}
@end deffn


@node List of Default Keybindings, Binding Keys, Key Bindings, Key Bindings
@section List of Default Keybindings
The following is a list of keybindings.

@table @kbd
@item C-t n
@itemx C-t C-n
@itemx C-t Space
go to the next window in the window list

@item C-t p
@itemx C-t C-p
Go to the previous window in the window list

@item C-t '
Go to a window by name

@item C-t g
@itemx C-t C-g
Abort the current command. This is useful if you accidentally hit @kbd{C-t}

@item C-t w
List all the windows

@item C-t 0-9
Select a window by number

@item C-t f
Select a frame by number

@item C-t s
Split current frame vertically

@item C-t S
Split current frame horizontally

@item C-t k
@itemx C-t C-k
Sends a kill message to the current frame and the running program.

@item C-t K
Kills the current frame and running program; like a kill -9.

@item C-t c
@itemx C-t C-c
Run an X terminal; by default xterm

@item C-t e
@itemx C-t C-e
Run Emacs 

@item C-t t
Sends a C-t to the frame; this is useful for applications like Firefox
which make heavy use of C-t (in Firefox's case, for opening a new
tab). This is similar to how GNU screen uses C-a a.

@item C-t w
@itemx C-t C-w
Prints out a list of the windows, their number, and their name.

@item C-t b
@itemx C-t C-b
Banish the mouse point to the lower right corner of the screen.

@item C-t a
@itemx C-t C-a
Prints out to the infobox the current time and date, much like the Unix command 'date'.

@item C-t C-t
Switch to the last window to have focus. So, it switches to the other
window, and if used again, it switches back to the
original. 

@item C-t !
Like in Emacs, this prompts for a shell command to run via /bin/sh. It
will not display any return values.

@item C-t r
If the screen is split into multiple frames, one split will be
undone. If there is only one split, the effect will be the same as C-t Q.

@item C-t o
If the screen is split into multiple frames, focus shifts to the
``next'' frame, where it cycles to the right and then down; analogous
to C-x o in Emacs.

@item C-t TAB

@item C-t F
Prints message ``Current Frame'' in the frame which has focus.

@item C-t ;
Opens the input box. Stumpwm commands can be run from here, and the
input history moved through.

@item C-t :
Opens the input box, but all things typed in here will be sent to the
Common Lisp interpreter where they will be ran as Lisp programs; thus,
input should be valid Common Lisp.

@item C-t C-h
The help.

@item C-t -
Hides all frames and show the root window.

@item C-t Q
Removes all splits and maximizes the frame with focus.

@item C-t Up
@itemx C-t Down
@itemx C-t Left
@itemx C-t Right
When the window is split into multiple frames, one can shift focus in
a desired cardinal direction via the D-pad. Up will shift focus up, if
possible, Down will shift downwards, etc.

@item C-t v
Prints out the version of the running Stumpwm.
@end table

@node Binding Keys,  , List of Default Keybindings, Key Bindings
@section Binding Keys

@defun define-key @var{keymap} @var{key} @var{command}
@end defun

@defun undefine-key @var{keymap} @var{key}
@end defun

@defun kbd @var{key-string}
@end defun

@defun set-prefix-key @var{key}
@end defun

@defun make-sparse-keymap
@end defun

@defvar *root-map*
@end defvar

@defvar *top-map*
@end defvar

@node Message and Input Bar, Windows, Key Bindings, Top
@chapter Message and Input Bar


@deffn {Command} echo @var{string}
@end deffn

@deffn {Command} colon @var{command}
@end deffn


@menu
* Customizing The Bar::         
* Using The Input Bar::         
* Programming The Message Bar::  
* Programming the Input Bar::   
@end menu

@node Customizing The Bar, Using The Input Bar, Message and Input Bar, Message and Input Bar
@section Customizing The Bar
The bar's appearance and behavior can be modified with the following
functions and variables.

@defun set-fg-color
@end defun

@defun set-bg-color
@end defun

@defun set-border-color
@end defun

@defun set-font
@end defun

@defvar *message-window-padding*
@end defvar

@defvar *message-window-gravity*
@end defvar

@defvar *timeout-wait*
@end defvar

@defvar *input-window-gravity*
@end defvar

@node Using The Input Bar, Programming The Message Bar, Customizing The Bar, Message and Input Bar
@section Using The Input Bar

The following is a list of keybindings for the input bar.

@table @kbd
@item DEL
delete-backward-char

@item C-d
delete-forward-char

@item Delete
delete-forward-char

@item C-f
forward-char

@item Right
forward-char

@item M-f
forward-word

@item C-b
backward-char

@item Left
backward-char

@item M-b
backward-word

@item C-a
move-beginning-of-line

@item C-e
move-end-of-line

@item C-k
kill-line

@item C-u
kill-to-beginning

@item C-p
history-back

@item Up
history-back

@item C-n
history-forward

@item Down
history-forward

@item RET
submit

@item C-g
abort

@item C-y
yank-selection
@end table

@node Programming The Message Bar, Programming the Input Bar, Using The Input Bar, Message and Input Bar
@section Programming The Message Bar

@defun echo-string
@end defun

@node Programming the Input Bar,  , Programming The Message Bar, Message and Input Bar
@section Programming the Input Bar
New input behavior can be added to the input bar by creating editing
functions and binding them to keys in the @var{*input-map*} using
@command{define-key}, just like other key bindings.

An input function takes 2 arguments: the input structure and the key pressed.

@defun read-one-line
@end defun

@defun read-one-char
@end defun

@defun input-insert-string
@end defun

@defun input-insert-char
@end defun

@defvar *input-map*
@end defvar

@node Windows, Frames, Message and Input Bar, Top
@chapter Windows

@deffn {Command} next
@end deffn

@deffn {Command} prev
@end deffn

@deffn {Command} delete
@end deffn

@deffn {Command} kill
@end deffn

@deffn {Command} windows
@end deffn

@deffn {Command} other
@end deffn

@deffn {Command} number @var{number}
@end deffn

@deffn {Command} meta @var{key}
@end deffn

@deffn {Command} select @var{string}
@end deffn


@menu
* Customizing Window Appearance::  
@end menu

@node Customizing Window Appearance,  , Windows, Windows
@section Customizing Window Appearance
@defvar *maxsize-border-width*
@end defvar

@defvar *transient-border-width*
@end defvar

@defvar *normal-border-width*
@end defvar

@defvar *focus-color*
@end defvar

@defvar *unfocus-color*
@end defvar

@node Frames, Mode-line, Windows, Top
@chapter Frames
Frames contain windows. All windows exist within a frame.

Those used to ratpoison will notice that this differs from ratpoison's
window pool, where windows and frames are not so tightly connected.

@deffn {Command} pull @var{window-number}
@end deffn

@deffn {Command} hsplit
@end deffn

@deffn {Command} vsplit
@end deffn

@deffn {Command} remove
@end deffn

@deffn {Command} only
@end deffn

@deffn {Command} curframe
@end deffn

@deffn {Command} fnext
@end deffn

@deffn {Command} sibling
@end deffn

@deffn {Command} fselect @var{frame-number}
@end deffn

@deffn {Command} resize @var{width} @var{height}
@end deffn


@deffn {Command} fclear
@end deffn

@deffn {Command} move-focus @var{direction}
@end deffn

@node Mode-line, Interacting With Unix, Frames, Top
@chapter The Mode Line
The mode line is a bar that runs across either the top or bottom of
the screen and is used to display information. By default the
mode line displays the list of windows, similar to the output C-t w
produces.

Toggle the mode line with the @command{mode-line} command or the lisp
function @code{stumpwm:toggle-mode-line}. Each screen has it's own
mode line. For example:

@example
;; turn on/off the mode line for the current screen only.
(stumpwm:toggle-mode-line (current-screen))

;; turn on/off the mode-line for all the screens
(mapc 'stumpwm:toggle-mode-line stumpwm:*screen-list*)
@end example

The mode line is updated after ever stumpwm command.

To display the window list and the current date on the modeline, one
might do the following:

@example
(setf stumpwm:*screen-mode-line-format*
      (list "%w | "
            (:eval (stumpwm:run-shell-command "date" t))))
@end example

@code{(stumpwm:run-shell-command "date" t)} runs the command
@command{date} and returns its output as a string.

@defun toggle-mode-line
@end defun

The following variables control the color, position, and size of the
mode line.

@defvar *mode-line-screen-position*
Specifies where the mode line is displayed. Valid values are :top and :bottom.
@end defvar

@defvar *mode-line-border-width* 1
Specifies How thick the mode line's border will be. Integer value.
@end defvar

@defvar *mode-line-pad-x* 
Specifies the number of padding pixels between the text and the side of the mode line. Integer value.
@end defvar

@defvar *mode-line-pad-y* 
The number of padding pixels between the modeline text and the top/bottom of the modeline? Integer value.
@end defvar

@defvar *mode-line-background-color* 
The mode line background color.
@end defvar

@defvar *mode-line-foreground-color* 
The mode line foreground color.
@end defvar

@defvar *mode-line-border-color* 
The mode line border color.
@end defvar

@node Interacting With Unix, Interacting With X11, Mode-line, Top
@chapter Interacting With Unix


@deffn {Command} exec @var{shell-command}
@end deffn

@deffn {Command} shell
@end deffn

@defun run-shell-command
@end defun

@defvar *shell-program*
@end defvar

@defun getenv
@end defun

@defun {(setf getenv)}
@end defun

@node Interacting With X11, Miscellaneous Commands, Interacting With Unix, Top
@chapter Interacting With X11

@defun set-x-selection
@end defun

@defun get-x-selection
@end defun

@node Miscellaneous Commands, Hooks, Interacting With X11, Top
@chapter Miscellaneous Commands
The following is a list of commands that don't really fit in any other
section.


@deffn {Command} banish
@end deffn

@deffn {Command} ratwarp @var{x} @var{y}
@end deffn

@deffn {Command} ratrelwarp @var{delta-x} @var{delta-y}
@end deffn

@deffn {Command} time
@end deffn


@deffn {Command} eval @var{s-expression}
@end deffn

@deffn {Command} reload
@end deffn

@deffn {Command} loadrc
@end deffn

@deffn {Command} help
@end deffn

@deffn {Command} abort
@end deffn

@deffn {Command} quit
@end deffn


@deffn {Command} web
@end deffn


@defun define-stumpwm-command
@end defun

@node Hooks, Command and Function Index, Miscellaneous Commands, Top
@chapter Hooks
Stumpwm exports a number of hooks you can use to add customizations;
like hooks in Emacs, you add to a hook with the @code{add-hook}
function. for example:

@example
(stumpwm:add-hook 'stumpwm:*new-window-hook* 'my-new-window-custos)
@end example

adds your @code{my-new-window-custos} function to the list of
functions called when a new window appears.

@defun add-hook
@end defun

@defun remove-hook
@end defun

The following hooks are available:

@defvr {Hook} *map-window-hook*
A hook called whenever a window is mapped.
@end defvr

@defvr {Hook} *unmap-window-hook*
A hook called whenever a window is withdrawn.
@end defvr

@defvr {Hook} *new-window-hook*
A hook called whenever a window is created.
@end defvr

@defvr {Hook} *destroy-window-hook*
A hook called whenever a window is destroyed.
@end defvr

@defvr {Hook} *focus-window-hook*
A hook called when a window is given focus.
@end defvr

@defvr {Hook} *unfocus-window-hook*
A hook called when a window loses focus.
@end defvr

@defvr {Hook} *start-hook*
A hook called when stumpwm starts.
@end defvr

@defvr {Hook} *internal-loop-hook*
A hook called inside stumpwm's inner loop.
@end defvr

@defvr {Hook} *focus-frame-hook*
A hook called when a frame is given focus. The hook functions are
called with 2 arguments: the current frame and the last frame.
@end defvr

@c @node Command Index, Variable Index, Mode-line, Top
@c @unnumbered Command Index
@c @printindex cmd

@node Command and Function Index, Variable Index, Hooks, Top
@unnumbered Command and Function Index
@printindex fn

@node Variable Index,  , Command and Function Index, Top
@unnumbered Variable Index
@printindex vr

@bye
