\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename stumpwm.info
@settitle StumpWM manual
@setchapternewpage odd
@c %**end of header

@dircategory X11
@direntry
* StumpWM: (StumpWM).       A Common Lisp window manager
@end direntry

@ifinfo
This is the Stump Window Manager user manual.

Copyright @copyright{} 2000, 2001 Shawn Betts

Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and
this permission notice are preserved on all copies.

@ignore
Permission is granted to process this file through TeX
and print the results, provided the printed document
carries a copying permission notice identical to this
one except for the removal of this paragraph (this
paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to copy and distribute modified
versions of this manual under the conditions for
verbatim copying, provided also that the sections
entitled ``Copying'' and ``GNU General Public License''
are included exactly as in the original, and provided
that the entire resulting derived work is distributed
under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute
translations of this manual into another language,
under the above conditions for modified versions,
except that this permission notice may be stated in a
translation approved by the Free Software Foundation.
@end ifinfo

@titlepage
@sp 10
@titlefont{The Stump Window Manager}
@author Shawn Betts

@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2000, 2001 Shawn Betts

Permission is granted to make and distribute verbatim
copies of this manual provided the copyright notice and
this permission notice are preserved on all copies.

Permission is granted to copy and distribute modified
versions of this manual under the conditions for
verbatim copying, provided also that the sections
entitled ``Copying'' and ``GNU General Public License''
are included exactly as in the original, and provided
that the entire resulting derived work is distributed
under the terms of a permission notice identical to this
one.

Permission is granted to copy and distribute
translations of this manual into another language,
under the above conditions for modified versions,
except that this permission notice may be stated in a
translation approved by the Free Software Foundation.
@end titlepage

@node Top, Introduction, (dir), (dir)

@ifinfo
This document explains how to use The Stump Window Manager.
@end ifinfo

@menu
* Introduction::                
* Key Bindings::                
* Message and Input Bar::       
* Windows::                     
* Frames::                      
* Mode-line::                   
* Groups::                      
* Screens::                     
* Interacting With Unix::       
* Interacting With X11::        
* Miscellaneous Commands::      
* Hooks::                       
* Command and Function Index::  
* Variable Index::              

@detailmenu
 --- The Detailed Node Listing ---

Introduction

* Starting StumpWM::            
* Basic Usage::                 
* Contact the StumpWM developers::  

Key Bindings

* List of Default Keybindings::  
* Binding Keys::                

Message and Input Bar

* Customizing The Bar::         
* Using The Input Bar::         
* Programming The Message Bar::  
* Programming the Input Bar::   

Windows

* Customizing Window Appearance::  
* Programming With Windows::    

Groups

* Customizing Groups::          

Screens

* Xinerama::                    

Miscellaneous Commands

* Menus::                       

@end detailmenu
@end menu

@node Introduction, Key Bindings, Top, Top
@chapter Introduction
StumpWM is an X11 window manager written entirely in Common Lisp. Its
user interface goals are similar to ratpoison's but with an emphasis on
customizability, completeness, and cushiness.

@menu
* Starting StumpWM::            
* Basic Usage::                 
* Contact the StumpWM developers::  
@end menu

@node Starting StumpWM, Basic Usage, Introduction, Introduction
@section Starting StumpWM
There are a number of ways to start StumpWM but possibly the most
straight forward method is as follows. This assumes you have a copy of
the StumpWM source code and are using the @emph{SBCL} Common Lisp environment.

@enumerate
@item
Install @emph{SBCL} and the @emph{portable-clx} package. In Debian,
@emph{portable-clx} is the @emph{cl-clx-sbcl} package.

@item
in the file @file{~/.sbclrc} insert:

@example
;;; If the first user-processable command-line argument is a filename,
;;; disable the debugger, load the file handling shebang-line and quit.
(let ((script (and (second *posix-argv*)
                   (probe-file (second *posix-argv*)))))
  (when script
    ;; Handle shebang-line
    (set-dispatch-macro-character #\# #\!
                                  (lambda (stream char arg)
                                    (declare (ignore char arg))
                                    (read-line stream)))
    ;; Disable debugger
    (setf *invoke-debugger-hook*
          (lambda (condition hook)
            (declare (ignore hook))
            ;; Uncomment to get backtraces on errors
            ;; (sb-debug:backtrace 20)
            (format *error-output* "Error: ~A~%" condition)
            (quit)))
    (load script)
    (quit)))
@end example

This allows @emph{SBCL} to act as part of a command-line script.

@item
Create a symlink in @file{~/.sbcl/systems/} to point to the
@file{stumpwm.asd} file, included in the StumpWM source. Now
@emph{SBCL} knows how to load StumpWM.

@example
ln -s /path/to/stumpwm/stumpwm.asd ~/.sbcl/systems
@end example

@item
In your @file{~/.xinitrc} file include the line
@command{/path/to/stumpwm.sbcl}. Remember to replace @samp{/path/to/}
with the actual path. @command{stumpwm.sbcl} is included in the
StumpWM source.

@item
Finally, start X windows with @command{startx}. Cross your fingers. It
may take some time for @emph{SBCL} to finish compiling StumpWM. This
only happens once. Subsequent start ups should be much
faster. Eventually you should see a @samp{Welcome To the Stump Window Manager}
message pop up in the upper, right corner. At this point, you have
successfully started StumpWM.
@end enumerate

@node Basic Usage, Contact the StumpWM developers, Starting StumpWM, Introduction
@section Basic Usage
Once you have StumpWM up and running, the first thing you might want
to do is start @samp{Emacs}. Type @kbd{C-t e}, or in other words
@kbd{Control + t} followed by @kbd{e}. Now perhaps you want an
@samp{xterm}. Type @kbd{C-t c}. Now you have some programs running.

To see a list of windows StumpWM is managing, type @kbd{C-t w}. The
highlighted window is the one you're looking at right now. It's the
focused window.

All of StumpWM's keys are bound to named commands, which can be
executed not only by keys but also from the input bar. Type @kbd{C-t
;} to open a command prompt. Now type @samp{time} and press
return. Note, @samp{time} can also be called by typing @kbd{C-t a}.
Throughout this manual you'll find definitions for commands,
functions, and variables. Any command you see in this manual can be
executed from the input bar or bound to a key.

At this point you probably want to switch back from your new
@samp{xterm} to @samp{Emacs}. Type @kbd{C-t C-t}. This runs the
@command{other} command. Type it again and you're back to xterm.

Perhaps you'd like to see @samp{emacs} and @samp{xterm}
side-by-side. Type @kbd{C-t s}. You have now split the screen into 2
@samp{frames}. For more information @xref{Frames}. To switch to the
empty frame type @kbd{C-t o}. Now let's pull the xterm window into
this empty frame. Type @kbd{C-t w} for a window listing. Find the
@samp{xterm} window. See the number beside it? Type @kbd{C-t} followed
by @samp{xterm}'s window number.

Another common activity is browsing the interwebs. Type @kbd{C-t !}.
The input bar pops up again. You can now run a shell command.  Let's
start a web browser: type @samp{firefox} into the input bar and press
return.

Unfortunately, @samp{firefox} probably isn't wide enough because it's
in one of the frames. Type @kbd{C-t Q} to remove all frames but the
current one and resize it to fit the screen.

For a full list of key bindings, @xref{List of Default Keybindings}.

@node Contact the StumpWM developers,  , Basic Usage, Introduction
@section Contact the StumpWM developers
The StumpWM home page is @url{http://stumpwm.nongnu.org/}.

You can reach Shawn Betts at @email{sabetts at vcn.bc.ca}.

The StumpWM mailing list is @email{stumpwm-devel@@nongnu.org} which
you can subscribe to at
@url{http://mail.nongnu.org/mailman/listinfo/stumpwm-devel}. Posting
is restricted to subscribers to keep spam out of the archives.

The StumpWM IRC channel can be found on Freenode at #stumpwm.



@node Key Bindings, Message and Input Bar, Introduction, Top
@chapter Key Bindings
StumpWM is controlled entirely by keystrokes and Lisp commands. It
mimics GNU Screen's keyboard handling. StumpWM's default prefix key is
@kbd{C-t}.

@deffn {Command} escape @var{key}
Set the prefix key. Here's how you would change the prefix key to @kbd{C-z}.

@example
escape C-z
@end example

@end deffn

@menu
* List of Default Keybindings::  
* Binding Keys::                
@end menu

@node List of Default Keybindings, Binding Keys, Key Bindings, Key Bindings
@section List of Default Keybindings
The following is a list of keybindings.

@table @kbd
@item C-t n
@itemx C-t C-n
@itemx C-t Space
Go to the next window in the window list

@item C-t p
@itemx C-t C-p
Go to the previous window in the window list

@item C-t '
Go to a window by name

@item C-t "
Select a window from a list and focus the window.

@item C-t g
@itemx C-t C-g
Abort the current command. This is useful if you accidentally hit @kbd{C-t}

@item C-t w
List all the windows

@item C-t 0-9
Select a window by number

@item C-t f
Select a frame by number

@item C-t s
Split current frame vertically

@item C-t S
Split current frame horizontally

@item C-t k
@itemx C-t C-k
Sends a kill message to the current frame and the running program.

@item C-t K
Kills the current frame and running program; like a kill -9.

@item C-t c
@itemx C-t C-c
Run an X terminal; by default xterm

@item C-t e
@itemx C-t C-e
Run Emacs 

@item C-t t
Sends a @key{C-t} to the frame; this is useful for applications like Firefox
which make heavy use of @key{C-t} (in Firefox's case, for opening a new
tab). This is similar to how GNU screen uses @kbd{C-a a}.

@item C-t w
@itemx C-t C-w
Prints out a list of the windows, their number, and their name.

@item C-t b
@itemx C-t C-b
Banish the mouse point to the lower right corner of the screen.

@item C-t a
@itemx C-t C-a
Display the current time and date, much like the Unix command @command{date}.

@item C-t C-t
Switch to the last window to have focus.

@item C-t !
Prompt for a shell command to run via @file{/bin/sh}. All output is discarded.

@item C-t r
If the screen is split into multiple frames, one split will be
undone. If there is only one split, the effect will be the same as @kbd{C-t Q}.

@item C-t o
If the screen is split into multiple frames, focus shifts to the
@command{next} frame, where it cycles to the right and then down; analogous
to @kbd{C-x o} in Emacs.

@item C-t TAB
Jump to the last frame that had focus.

@item C-t F
Display ``Current Frame'' in the frame which has focus.

@item C-t ;
Opens the input box. StumpWM commands can be run from here, and the
input history moved through.

@item C-t :
Opens the input box, but all things typed in here will be sent to the
Common Lisp interpreter where they will be ran as Lisp programs; thus,
input should be valid Common Lisp.

@item C-t C-h
The help.

@item C-t -
Hides all frames and show the root window.

@item C-t Q
Removes all splits and maximizes the frame with focus.

@item C-t Up
@itemx C-t Down
@itemx C-t Left
@itemx C-t Right
Shift focus to an adjacent frame in the specified direction. @kbd{C-t Up} will
shift focus up, if possible, @kbd{C-t Down} will shift downwards, etc.

@item C-t v
Prints out the version of the running StumpWM.

@item C-t m
@itemx C-t C-m
Display the last message. Hitting this keybinding again displays the
message before that, and so on.

@item C-t G
Display all groups and windows in each group. For more information @xref{Groups}.

@item C-t F1
@itemx C-t F2
@itemx C-t F3
@itemx C-t F4
@itemx C-t F5
@itemx C-t F6
@itemx C-t F7
@itemx C-t F9
@itemx C-t F9
@itemx C-t F10
Jump to the corresponding group. @kbd{C-t F1} jumps to group 1 and so on.

@item C-t g g
Show the list of groups.

@item C-t g c
Create a new group.

@item C-t g n
@itemx C-t g C-n
@itemx C-t g SPC
@itemx C-t g C-SPC
Go to the next group in the list.

@item C-t g '
Select a group by name or by number.

@item C-t g m
Move the current window to the specified group.

@item C-t g k
Kill the current group. All windows are merged into the next group.

@item C-t g 1
@itemx C-t g 2
@itemx C-t g 3
@itemx C-t g 4
@itemx C-t g 5
@itemx C-t g 6
@itemx C-t g 7
@itemx C-t g 8
@itemx C-t g 9
@itemx C-t g 0
Go to the corresonding group. @kbd{C-t g 1} jumps to group 1 and so on.

@end table

@node Binding Keys,  , List of Default Keybindings, Key Bindings
@section Binding Keys

@defun define-key @var{keymap} @var{key} @var{command}
Add a keybinding mapping the key, @var{key}, to the command,
@var{command}, in the specified keymap. For example,

@example
(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "C-z") "echo Zzzzz...")
@end example

Now when you type C-t C-z, you'll see the text ``Zzzzz...'' pop up.
@end defun

@defun undefine-key @var{keymap} @var{key}
Clear the key binding in the specified keybinding.
@end defun

@defun kbd @var{key-string}
This compiles a key string into a key structure used by
@code{define-key}, @code{undefine-key}, @code{set-prefix-key} and
others.
@end defun

@defun set-prefix-key @var{key}
Change the prefix key.

@example
(stumpwm:set-prefix-key (stumpwm:kbd "C-M-H-s-z"))
@end example

This will change the prefix key to @key{Control} + @key{Meta} + @key{Hyper} + @key{Super} +
the @key{z} key. By most standards, a terrible prefix key but it makes a
great example.

@end defun

@defun make-sparse-keymap
Create an empty keymap. If you want to create a new list of bindings
in the key binding tree, this is where you start. To hang frame
related bindings off @kbd{C-t C-f} one might use the following code:

@example
(defvar *my-frame-bindings*
  (let ((m (stumpwm:make-sparse-keymap)))
    (stumpwm:define-key m (stumpwm:kbd "f") "curframe")
    (stumpwm:define-key m (stumpwm:kbd "M-b") "move-focus left")
    m ; NOTE: this is important
  ))

(stumpwm:define-key stumpwm:*root-map* (stumpwm:kbd "C-f") '*my-frame-bindings*)
@end example

@end defun

@defvar *root-map*
This is the keymap by default bound to @kbd{C-t}. It is known as the @dfn{prefix map}.
@end defvar

@defvar *top-map*
The top level key map. This is where you'll find the binding for the
@dfn{prefix map}.
@end defvar

@node Message and Input Bar, Windows, Key Bindings, Top
@chapter Message and Input Bar

@deffn {Command} echo @var{string}
Display @var{string} in the message bar.
@end deffn

@deffn {Command} colon @var{initial-text}
Read a command from the user. @var{initial-text} is optional. When
supplied, the text will appear in the prompt.
@end deffn


@menu
* Customizing The Bar::         
* Using The Input Bar::         
* Programming The Message Bar::  
* Programming the Input Bar::   
@end menu

@node Customizing The Bar, Using The Input Bar, Message and Input Bar, Message and Input Bar
@section Customizing The Bar
The bar's appearance and behavior can be modified with the following
functions and variables.

@defun set-fg-color @var{color}
Set the foreground color for the message bar and input
bar. @var{color} can be any color recognized by X.
@end defun

@defun set-bg-color @var{color}
Set the background color for the message bar and input
bar. @var{color} can be any color recognized by X.
@end defun

@defun set-border-color @var{color}
Set the border color for the message bar and input
bar. @var{color} can be any color recognized by X.
@end defun

@defun set-font @var{font}
Set the font for the message bar and input bar.
@end defun

@defvar *message-window-padding*
The number of pixels that pad the text in the message window.
@end defvar

@defvar *message-window-gravity*
This variable controls where the message window appears. The follow
are valid values.
@table @asis
@item :top-left
@item :top-right
@item :bottom-left
@item :bottom-right
@item :center
@end table
@end defvar

@defvar *timeout-wait*
Specifies, in seconds, how long a message will appear for. This must
be an integer.
@end defvar

@defvar *input-window-gravity*
This variable controls where the input window appears. The follow
are valid values.
@table @asis
@item :top-left
@item :top-right
@item :bottom-left
@item :bottom-right
@item :center
@end table
@end defvar

@node Using The Input Bar, Programming The Message Bar, Customizing The Bar, Message and Input Bar
@section Using The Input Bar

The following is a list of keybindings for the input bar.

@table @kbd
@item DEL
delete-backward-char

@item C-d
@itemx Delete
delete-forward-char

@item C-f
@itemx Right
forward-char

@item M-f
forward-word

@item C-b
@itemx Left
backward-char

@item M-b
backward-word

@item C-a
@itemx Home
move-beginning-of-line

@item C-e
@itemx End
move-end-of-line

@item C-k
kill-line

@item C-u
kill-to-beginning

@item C-p
@itemx Up
history-back

@item C-n
@itemx Down
history-forward

@item RET
submit

@item C-g
abort

@item C-y
yank-selection
@end table

@node Programming The Message Bar, Programming the Input Bar, Using The Input Bar, Message and Input Bar
@section Programming The Message Bar

@defun echo-string @var{string}
Display @var{string} in the message bar.
@end defun

@node Programming the Input Bar,  , Programming The Message Bar, Message and Input Bar
@section Programming the Input Bar
New input behavior can be added to the input bar by creating editing
functions and binding them to keys in the @var{*input-map*} using
@command{define-key}, just like other key bindings.

An input function takes 2 arguments: the input structure and the key pressed.

@defun read-one-line @var{screen} @var{prompt} &optional @var{initial-input}
Read a line of input from the user.
@end defun

@defun read-one-char @var{screen}
Read one character from the user.
@end defun

@defun input-insert-string @var{input} @var{string}
Insert @var{string} into the input at the current
position. @var{input} must be of type @var{input-line}. Input
functions are passed this structure as their first argument.
@end defun

@defun input-insert-char @var{input} @var{char}
Insert @var{char} into the input at the current
position. @var{input} must be of type @var{input-line}. Input
functions are passed this structure as their first argument.
@end defun

@defvar *input-map*
This is the keymap containing all input editing key bindings.
@end defvar

@node Windows, Frames, Message and Input Bar, Top
@chapter Windows

@deffn {Command} next
Go to the next window in the window list.
@end deffn

@deffn {Command} prev
Go to the previous window in the window list.
@end deffn

@deffn {Command} delete
Delete the current window. This is a request sent to the window. The
window's client may decide not to grant the request or may not be able
to if it is unresponsive.
@end deffn

@deffn {Command} kill
Tell X to disconnect the client that owns the current window.if
@command{delete} didn't work, try this.
@end deffn

@deffn {Command} windows
Display a list of managed windows.
@end deffn

@deffn {Command} other
Switch to the window last focused.
@end deffn

@deffn {Command} number @var{number}
Change the window's number to the specified number. If another window
is using the number, then the windows swap numbers.
@end deffn

@deffn {Command} meta @var{key}
Send a fake key to the current window. @var{key} is a typical StumpWM key, like @kbd{C-M-o}.
@end deffn

@deffn {Command} select @var{substring}
Switch to the first window that starts with @var{substring}.
@end deffn

@deffn {Command} windowlist
Allow the user to Select a window from the list of windows and focus
the selected window. For information of menu bindings @xref{Menus}.
@end deffn


@menu
* Customizing Window Appearance::  
* Programming With Windows::    
@end menu

@node Customizing Window Appearance, Programming With Windows, Windows, Windows
@section Customizing Window Appearance

@defvar *maxsize-border-width*
The width in pixels given to the borders of windows with maxsize or ratio hints.
@end defvar

@defvar *transient-border-width*
The width in pixels given to the borders of transient or pop-up windows.
@end defvar

@defvar *normal-border-width*
The width in pixels given to the borders of regular windows.
@end defvar

@defvar *focus-color*
The color given to the border of the focused window.
@end defvar

@defvar *unfocus-color*
The color given to the border of all windows without focus.
@end defvar

@node  Programming With Windows,  , Customizing Window Appearance, Windows
@section Programming With Windows

@defmac def-window-attr @var{attr}
Create a new window attribute and corresponding get/set functions.
@end defmac

@node Frames, Mode-line, Windows, Top
@chapter Frames
Frames contain windows. All windows exist within a frame.

Those used to ratpoison will notice that this differs from ratpoison's
window pool, where windows and frames are not so tightly connected.

@deffn {Command} pull @var{window-number}
Move the window whose number is @var{window-number} to the current frame.
@end deffn

@deffn {Command} hsplit
Split the current frame into 2 side-by-side frames.
@end deffn

@deffn {Command} vsplit
Split the current frame into 2 frames, one on top of the other.
@end deffn

@deffn {Command} remove
Remove the current frame. Windows in the frame are migrated to the
frame taking up its space.
@end deffn

@deffn {Command} only
Delete all the frames but the current one and grow it to take up the entire screen.
@end deffn

@deffn {Command} curframe
Display a window indicating which frame is focused.
@end deffn

@deffn {Command} fnext
Cycle through the frame tree to the next frame.
@end deffn

@deffn {Command} sibling
Jump to the frame's sibling. If a frame is split into twe frames,
these two frames are siblings.
@end deffn

@deffn {Command} fother
Jump to the last frame that had focus.
@end deffn

@deffn {Command} fselect @var{frame-number}
Display a number in the corner of each frame and let the user to
select a frame by number. If @var{frame-number} is specified, just
jump to that frame.
@end deffn

@deffn {Command} resize @var{width} @var{height}
Resize the current frame by @var{width} and @var{height} pixels
@end deffn


@deffn {Command} fclear
Clear the current frame.
@end deffn

@deffn {Command} move-focus @var{direction}
Focus the frame adjacent to the current one in the specified
direction. The following are valid directions:
@table @asis
@item up
@item down
@item left
@item right
@end table

@end deffn

@node Mode-line, Groups, Frames, Top
@chapter The Mode Line
The mode line is a bar that runs across either the top or bottom of
the screen and is used to display information. By default the
mode line displays the list of windows, similar to the output C-t w
produces.

The mode line can be turned on and off with the @command{mode-line}
command or the lisp function @code{stumpwm:toggle-mode-line}. Each
screen has its own mode line. For example:

@example
;; turn on/off the mode line for the current screen only.
(stumpwm:toggle-mode-line (current-screen))

;; turn on/off the mode-line for all the screens
(mapc 'stumpwm:toggle-mode-line stumpwm:*screen-list*)
@end example

The mode line is updated after every StumpWM command.

To display the window list and the current date on the modeline, one
might do the following:

@example
(setf stumpwm:*screen-mode-line-format*
      (list "%w | "
            '(:eval (stumpwm:run-shell-command "date" t))))
@end example

@code{(stumpwm:run-shell-command "date" t)} runs the command
@command{date} and returns its output as a string.

@deffn {Command} mode-line
A command to toggle the mode line visibility.
@end deffn

@defun toggle-mode-line
@end defun

The following variables control the color, position, and size of the
mode line.

@defvar *mode-line-screen-position*
Specifies where the mode line is displayed. Valid values are :top and :bottom.
@end defvar

@defvar *mode-line-border-width* 1
Specifies how thick the mode line's border will be. Integer value.
@end defvar

@defvar *mode-line-pad-x* 
Specifies the number of padding pixels between the text and the side of the mode line. Integer value.
@end defvar

@defvar *mode-line-pad-y* 
The number of padding pixels between the modeline text and the top/bottom of the modeline? Integer value.
@end defvar

@defvar *mode-line-background-color* 
The mode line background color.
@end defvar

@defvar *mode-line-foreground-color* 
The mode line foreground color.
@end defvar

@defvar *mode-line-border-color* 
The mode line border color.
@end defvar

@node Groups, Screens, Mode-line, Top
@chapter Groups
Groups in StumpWM are more commonly known as @dfn{virtual desktops} or
@dfn{workspaces}. Why not create a new term for it?

@deffn {Command} gnew @var{name}
Create a new group with the specified name. The new group becomes the
current group.
@end deffn

@deffn {Command} gnewbg @var{name}
Create a new group but do not switch to it.
@end deffn

@deffn {Command} gnext
Cycle to the next group in the group list.
@end deffn

@deffn {Command} gprev
Cycle to the previous group in the group list.
@end deffn

@deffn {Command} groups
Display the list of groups with their number and
name. @var{*group-format*} controls the formatting.
@end deffn

@deffn {Command} vgroups
Like @command{groups} but also display the windows in each group.
@end deffn

@deffn {Command} gselect @var{substring}
Select the first group that starts with
@var{substring}. @var{substring} can also be a number, in which case
@command{gselect} selects the group with that number.
@end deffn

@deffn {Command} gmove @var{to-group}
Move the current window to the specified group.
@end deffn

@deffn {Command} gkill
Kill the current group. All windows in the current group are migrated
to the next group.
@end deffn

@menu
* Customizing Groups::          
@end menu

@node Customizing Groups,  , Groups, Groups
@section Customizing Groups

@defvar *group-formatters*
An alist of characters and formatter functions. The character can be
used as a format character in @var{*group-format*}. When the character
is encountered in the string, the corresponding function is called
with a group as an argument. The functions return value is inserted
into the string. If the return value isn't a string it is converted to
one using @code{prin1-to-string}.
@end defvar

@defvar *group-format*
The format string that decides what information will show up in the
group listing.
@end defvar

@node Screens, Interacting With Unix, Groups, Top
@chapter Screens
StumpWM handles multiple screens.

@menu
* Xinerama::                    
@end menu

@node Xinerama,  , Screens, Screens
@section Xinerama
Currently StumpWM doesn't explicitly handle Xinerama. Though, it
shouldn't break StumpWM.

@node Interacting With Unix, Interacting With X11, Screens, Top
@chapter Interacting With Unix


@deffn {Command} exec @var{shell-command}
Run the shell command asynchronously. Output is discarded.
@end deffn

@deffn {Command} shell
Open an xterm or raise an xterm if one is already running.
@end deffn

@defun run-shell-command @var{command} &optional @var{collect-output-p}
Run the specified shell command. If @var{collect-output-p} is @code{T}
then run the command synchonously and collect the output. Be
careful. If the shell command doesn't return, it will hang StumpWM. In
such a case, kill the shell command to resume StumpWM.
@end defun

@defvar *shell-program*
The shell program used by @code{run-shell-command}.
@end defvar

@defun getenv @var{env-var}
Return the value of the environment variable, @var{env-var}.
@end defun

@defun {(setf getenv)} @var{env-var} @var{value}
Set the value of the environment variable, @var{env-var} to @var{value}.
@end defun

@node Interacting With X11, Miscellaneous Commands, Interacting With Unix, Top
@chapter Interacting With X11

@defun set-x-selection @var{string}
Set the X11 selection string to @var{string}.
@end defun

@defun get-x-selection
Return the X11 selection.
@end defun

@node Miscellaneous Commands, Hooks, Interacting With X11, Top
@chapter Miscellaneous Commands
The following is a list of commands that don't really fit in any other
section.


@deffn {Command} banish
Warp the mouse the lower right corner.
@end deffn

@deffn {Command} ratwarp @var{x} @var{y}
Warp the mouse to the specified location.
@end deffn

@deffn {Command} ratrelwarp @var{delta-x} @var{delta-y}
Warp the mouse by the specified amount from its current position.
@end deffn

@deffn {Command} time
Display time.
@end deffn


@deffn {Command} eval @var{s-expression}
Evaluate the lisp s-expression and display the result.
@end deffn

@deffn {Command} reload
Reload StumpWM using @code{asdf}.
@end deffn

@deffn {Command} loadrc
Reload the @file{~/.stumpwmrc} file.
@end deffn

@deffn {Command} help
Display all the bindings in @var{*root-map*}.
@end deffn

@deffn {Command} abort
Do nothing.
@end deffn

@deffn {Command} quit
Quit StumpWM.
@end deffn

@deffn {Command} web
Load firefox or switch to its window if it is running.
@end deffn

@defun run-commands &rest @var{commands}
Run each stumpwm command in sequence. This could be used if you're
used to ratpoison's rc file and you just want to run commands or don't
know lisp very well. One might put the following in one's rc file:

@example
(stumpwm:run-commands
  "escape C-z"
  "exec firefox"
  "split")
@end example
@end defun


@defun define-stumpwm-command @var{name} (@var{var} @var{type} @var{prompt}) ...
Create a new command with the name @var{name}.
@end defun

@menu
* Menus::                       
@end menu

@node Menus,  , Miscellaneous Commands, Miscellaneous Commands
@subsection Menus
Some commands present the options in a menu. The following are the menu key bindings:

@table @kbd
@item C-p
@itemx Up
@itemx k
Highlight the previous menu option.

@item C-n
@itemx Down
@itemx j
Highlight the next menu option.

@item C-g
@itemx ESC
Abort the menu.

@item RET
Select the highlighted option.

@end table

@node Hooks, Command and Function Index, Miscellaneous Commands, Top
@chapter Hooks
StumpWM exports a number of hooks you can use to add customizations;
like hooks in Emacs, you add to a hook with the @code{add-hook}
function. for example:

@example
(stumpwm:add-hook 'stumpwm:*new-window-hook* 'my-new-window-custos)
@end example

adds your @code{my-new-window-custos} function to the list of
functions called when a new window appears.

@defmac add-hook @var{hook-variable} @var{function}
Add @var{function} to the hook @var{hook-variable}. For example, to
display a message whenever you switch frames:

@example
(defun my-rad-fn (from-frame to-frame)
  (stumpwm:echo-string (stumpwm:current-screen) "Mustard!"))

(stumpmwm:add-hook stumpwm:*focus-frame-hook* 'my-rad-fn)
@end example
@end defmac

It is not recommended you add lambda functions or function objects to
a hook as they are difficult to remove.

@defmac remove-hook @var{hook-variable} @var{function}
Remove the specified function from the hook.
@end defmac

The following hooks are available:

@defvr {Hook} *map-window-hook*
A hook called whenever a window is mapped.
@end defvr

@defvr {Hook} *unmap-window-hook*
A hook called whenever a window is withdrawn.
@end defvr

@defvr {Hook} *new-window-hook*
A hook called whenever a window is created.
@end defvr

@defvr {Hook} *destroy-window-hook*
A hook called whenever a window is destroyed.
@end defvr

@defvr {Hook} *focus-window-hook*
A hook called when a window is given focus.
@end defvr

@defvr {Hook} *unfocus-window-hook*
A hook called when a window loses focus.
@end defvr

@defvr {Hook} *start-hook*
A hook called when StumpWM starts.
@end defvr

@defvr {Hook} *internal-loop-hook*
A hook called inside StumpWM's inner loop.
@end defvr

@defvr {Hook} *focus-frame-hook*
A hook called when a frame is given focus. The hook functions are
called with 2 arguments: the current frame and the last frame.
@end defvr

@node Command and Function Index, Variable Index, Hooks, Top
@unnumbered Command and Function Index
@printindex fn

@node Variable Index,  , Command and Function Index, Top
@unnumbered Variable Index
@printindex vr

@bye
