#!/bin/sh

# Copyright (C) 2007 Jonathan Moore Liles
#
# stumpish is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# stumpish is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
# Boston, MA 02111-1307 USA

### STUMPwm Interactive Shell.

IFS='
'

function wait_result ()
{
	while true
	do
		RESULT=`xprop -root -f STUMPWM_COMMAND_RESULT 8s STUMPWM_COMMAND_RESULT 2>/dev/null`

		if echo "$RESULT" | grep -v -q 'not found.$'
		then
			break;
		fi

		sleep 1;
	done

	xprop -root -remove STUMPWM_COMMAND_RESULT

	if echo "$RESULT" | grep -q '= $'
	then
		return 1;
	fi

	echo $RESULT | sed 's/[^"]*"//;s/"$//;s/\\n/\n/g;s/\\"/"/g;s/\n\+$//;
			s/\^[*[:digit:]]\{2\}//g;s/\^[Bbn]//g;'
}

function send_cmd ()
{
	xprop -root -f STUMPWM_COMMAND 8s -set STUMPWM_COMMAND "$1"

	wait_result
}

function usage ()
{
cat <<EOF
Usage: stumpish [command]

StumpIsh is the StumpWM shell. Use it to interact a running
StumpWM instnace.  When run from a terminal with no
arguments, stumpish accepts commands interactively and
prints each result.  If standard input is a pipe, stumpish
executes any number of commands and prints the concatenated
results. If an arugment is given on the command line,
stumpish executes it as a stumpwm command and returns one
result.

Example:
	echo 'eval (group-windows (current-group))' | stumpish
EOF
exit 0;
}

if [ $# -gt 0 ]
then
	[ "$1" == "--help" ] && usage

	send_cmd "$1"
else
	if [ -t 0 ]
	then
		echo -e '\e[1;35mWelcome to the StumpWM Interactive Shell.\n\e[37mType \e[32mcommands\e[37m for a list of commands.\e[0m'
		while read -p "> "
		do
			echo -ne '\e[1;32m'
			send_cmd "$REPLY"
			echo -ne '\e[0m'
		done
	else
		while read
		do
			send_cmd "$REPLY"
		done
	fi
fi

